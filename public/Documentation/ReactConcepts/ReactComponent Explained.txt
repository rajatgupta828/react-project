 - React components are basically a function.
 - Those functions are basically just rendering something, it can be HTML as well.
    function App() {
        return (
            <div className="App">
            <header className="App-header">
                <h1>Let's Get Started</h1>
            </header>
            </div>
        );
        }

        export default App;
- We can then Import App and use them as and when needed.
- This is basically called as JSX, special syntax that is created by react team which can be decoded.



******************************************************************************************
JSX
******************************************************************************************

JSX is HTML code embedded in Java script file.
previously we needed to import react everywhere we wanted to define the JSX code.

When we use JSX, react.createElement() method is called under the hood.
 It takes 3 arguments
    - First argument should be the element sthat should be created.
    - Second argument is the object that configures this element.
    - Third Arguments are - >  list of argument which takes the code that should be between the opening and closing tags.


******************************************************************************************
Writing functions in JSX
******************************************************************************************
1.  Normal function
    function App(){
        return(
            .... Your code here
        );
    }

2. We can use Arrow functions as well just like any other Java script

    const App = () => {
        return(
            .... Your code here
        );
    }

******************************************************************************************
Working of React
******************************************************************************************
It compares the DOM with the previous DOM and repaints the DOM again and again.

Building the big user Inerface from smaller interfaces is called as composition.

**************************************************************************************************************************
Making React reactive
**************************************************************************************************************************
handling the changes, we need to define the button for example :
    <button>Change Title</button>
Instead of writing in a reactive way :
    document.getElementById('button').addEventListner()
What we can do is :
    in the JSX element we can have on.. props, like onClick, and many more and these on.. methods need a function that needs to
    be executed 
    <button onClick={() => {console.log('Clicked !')}}>Change Title</button>
    This fucntion can be on the fly or can be defined as well. Below is exmaple of it defined later
    <button onClick={() => {titleClick}}>Change Title</button>
    If a element has a event, it's handler can be added.


**************************************************************************************************************************
React State
**************************************************************************************************************************
All react components are functions and we never call it, so someone has to call it. react calls it.
When Custom components are called that is the time when under the hood, react calls our component functions and returns what ever that
function returns.
Later all the JSX is transformed to HTML and is transformed to webpge.
React never re-loads on it's own , and we need to tell react that something has changed and it needs to be reloaded.
That is where state comes into picture.


Click changes, variable changes do not cause the function to run again.

We can define useState in our function , which is React hook, there are many other hooks, they start with ** use **
and all of these hooks must be called inside the component fucntions.

We can pass arguments to useState variable, for example if we need the react hook to be changed based on props.title variable,
we can pass that in the useState variable.
useState(props.title)

useState default variable will need the component function to be called again.

useState returns a array, where the first element is variable itself, second element is a method to update the variable as we
can not update the variables just like normal variable, so it can be named as below :

const [title, setTitle] = useState(props.title);

Then we can use it :
    const titleClickHandler = () => {
        setTitle('Updated Title');
        console.log(title);
    };

Simply, if we have data that changes and that needs the UI to be changed, we would need the state. Regular variables will
not help us.

React State can be updated in many ways, useState hook is just 1 of them
    ---------------------------------------------------------------------------------
    Handling Multiple States
    ---------------------------------------------------------------------------------
    We can have multiple state components and we can have multiple useState() statements.
    these statements will be all seperate from one another.
    const [enteredTitle, setEnteredTitle] = useState('');
    const [enteredAmount, setenteredAmount] = useState('');
    const [enteredDate, setenteredDate] = useState('');

    We can also have 1 state , which will have all 3 states, and that's personal preference.

    To define that :

    To set :
    const [userInput, setUserInput] = useState({
        enteredTitle : '',
        enteredAmount : '',
        enteredDate :''
    });

    /*
    To set state new if title changes ---
    */
   const titleChangeHandler = (event) => {
        // Updating single state
        // setEnteredTitle(event.target.value);

        //Updating all state together
        setUserInput((prevState) => {
           return  {...prevState,enteredTitle: event.target.value}
        });
    };

    We pass on prevState as a value because , the react schedules the updates and optimizes it as per it's own comfort and sometimes
    that might not happen immediately and hence we need the previous state to update instanteneously.
    